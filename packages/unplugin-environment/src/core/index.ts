import path from "path";
import { fileURLToPath } from "url";
import { config as dotenvConfig } from "dotenv";
import type { UnpluginFactory } from "unplugin";
import * as Core from "./core";
import { log } from "./logger";
import type { PluginOption } from "./types";

const withBanner = (a: string) =>
	[
		"",
		"// DO NOT EDIT THIS FILE. IT IS GENERATED BY UNPLUG.PLUGIN-ENVIRONMENT",
		"// THIS FILE IS GENERATE FROM `unplugin-environment` - see https://npm.im/unplugin-environment",
		"",
		a,
	].join("\n");

/**
 * NOTE:
 * Vite not load env file automatically until user set configuration for env.
 * So, we load all env file here (with `dotenv` package) and filter by our options.
 */
export const unpluginFactory: UnpluginFactory<PluginOption> = (o) => {
	const isProduction =
		process?.env?.CI === "true" && process?.env?.NODE_ENV !== "development";
	const env = process.env as Record<string, string>;
	dotenvConfig({ processEnv: env });
	const options = Core.getOptions(o);
	/**
	 * This writer function for generate `env.d.ts` file.
	 */
	const writer = () =>
		import("fs/promises").then(async (fs) => {
			fs.writeFile(
				path.resolve(path.dirname(fileURLToPath(import.meta.url)), "env.d.ts"),
				withBanner(Core.createModuleDTS(options)),
			);
		});

	const logError = (e: Error) => {
		log({
			kind: "error",
			message: e?.message || "something went wrong",
			prefix: "unplugin-environment",
		});
		isProduction && process.exit(1);
	};

	return {
		name: "unplugin-environment",
		enforce: "pre",
		resolveId: Core.resolveId(options),
		load: Core.load(env, options),
		watchChange: Core.watchChange([".env"], () => {
			dotenvConfig({ processEnv: env });
		}),
		buildStart: () => Core.build(env, options).then(writer).catch(logError),
	};
};
